/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Application_Compta;

import Classes.Facture;
import java.awt.Frame;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.Signature;
import java.security.SignatureException;
import java.util.LinkedList;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;
import utilitaire.BaseException;
import utilitaire.FichierConfig;

/**
 *
 * @author vange
 */
public class FenListBill extends javax.swing.JDialog {
    
    private Object[] col = { "Id", "Societe", "Date", "Montant Total", "MontantAPayer", "Moyen d'envoi" };
    private DefaultTableModel modelFactures = new DefaultTableModel(col, 0);
    
    public static Socket cliSock;
    public static FichierConfig ConfigProperty = new FichierConfig();
    private String sepProperty;
    private String finChaine;
    private static String codeProvider = "BC"; //CryptixCrypto";
    private static PrivateKey cleClient;
    private static SecretKey keySession;
    
    private java.awt.Frame parent;
    /**
     * Creates new form FenListBill
     */
    public FenListBill(java.awt.Frame parent, boolean modal, Socket sock, PrivateKey keyClient, SecretKey cleSession) throws IOException {
        super(parent, modal);
        initComponents();
        
        cliSock = sock;
        sepProperty = ConfigProperty.getConfig().getProperty("separateur");
        finChaine = ConfigProperty.getConfig().getProperty("finChaine");
        cleClient=keyClient;
        keySession = cleSession;
        
        jTableFactures.setModel(modelFactures);
        
        for(int i = modelFactures.getRowCount(); i > 1; --i)
        {
            modelFactures.removeRow(i-1);
        }
        
        recupSocietes();
    }
    
    private void recupSocietes() throws IOException
    {
        String message = "Liste_Societe" + finChaine;
        
        Envoyer(message);
        
        StringTokenizer st;
        String mes;
        
        DataInputStream dis = new DataInputStream(cliSock.getInputStream());
        mes = dis.readUTF();
        System.out.println(mes);
        st = new StringTokenizer(mes, sepProperty);
        
        while (st.hasMoreElements()) {
           CbSociete.addItem(st.nextElement());
        }
    }
    
    public String Envoyer(String message)
    {
        String reponse = null;
        try 
        {
            DataOutputStream dos= new DataOutputStream(cliSock.getOutputStream());

            dos.writeUTF(message);
        } 
        catch (IOException ex) 
        {
            Logger.getLogger(Applic_Compta.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return reponse;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        BRecuperer = new javax.swing.JButton();
        FDateFin = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableFactures = new javax.swing.JTable();
        FDateDebut = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        CbSociete = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Listing factures");

        jLabel5.setText("Date de fin");

        BRecuperer.setText("Recuperer");
        BRecuperer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BRecupererActionPerformed(evt);
            }
        });

        FDateFin.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("MM/YYYY"))));

        jTableFactures.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTableFactures.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Societe", "Date", "Montant Total", "Montant Restant", "Moyen d'envoi"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableFactures.setToolTipText("");
        jScrollPane1.setViewportView(jTableFactures);

        FDateDebut.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("MM/YYYY"))));

        jLabel2.setText("Choisissez une société :");

        jLabel3.setText("Date de début :");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(288, 288, 288)
                .addComponent(BRecuperer)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 675, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(18, 18, 18)
                                        .addComponent(FDateDebut, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(18, 18, 18)
                                        .addComponent(CbSociete, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(240, 240, 240)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel1))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(FDateFin, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(88, 88, 88))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(CbSociete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FDateDebut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(FDateFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(37, 37, 37)
                .addComponent(BRecuperer)
                .addGap(27, 27, 27)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BRecupererActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BRecupererActionPerformed

        try {
            DataInputStream dis= new DataInputStream(cliSock.getInputStream());
            DataOutputStream dos= new DataOutputStream(cliSock.getOutputStream());

            String message = "LIST_BILLS" + finChaine;
                    
            Envoyer(message);
            
            String donnees;
            
            String nomSociete = (String) CbSociete.getSelectedItem();
            String dd = FDateDebut.getText();
            String df = FDateFin.getText();
            donnees =  nomSociete + sepProperty + dd + sepProperty + df;
            
            byte[] Message = donnees.getBytes();

            System.out.println("Instanciation de la signature");
            Signature s = Signature. getInstance("SHA1withRSA",codeProvider);
            System.out.println("Initialisation de la signature");
            s.initSign(cleClient);
            System.out.println("Hachage du message");
            s.update(Message);
            System.out.println("Generation des bytes");
            byte[] signature = s.sign();
            System.out.println("Termine : signature construite");
            System.out.println("Signature = " + new String(signature));
            System.out.println("Longueur de la signature = " + signature.length);
            System.out.println("Envoi du message et de la signature");
            dos.writeUTF(donnees);
            dos.writeInt(signature.length);
            dos.write(signature);

            String reponse = dis.readUTF();
            if (reponse.equals("Signature testee avec succes"))
            {
                dis = new DataInputStream( new BufferedInputStream(cliSock.getInputStream()));

                int taille = dis.readInt();
                System.out.println("TAILLE :" + taille);
                if (taille>0)
                {
                    Facture fact;
                    Object[] data ;
                    
                    int size = dis.readInt();
                    byte[] factureCryptée = new byte[size];
                    dis.readFully(factureCryptée);

                    Cipher chiffrementd = Cipher.getInstance("DES/ECB/PKCS5Padding");
                    chiffrementd.init(Cipher.DECRYPT_MODE, keySession);
                    byte[] texteDécodé = chiffrementd.doFinal(factureCryptée);
                    String texteDécodéClair = new String (texteDécodé);
                    System.out.println(new String(factureCryptée) + " ---> " + texteDécodéClair);
                    
                    StringTokenizer st = new StringTokenizer(texteDécodéClair, finChaine);
                    Facture facture;
                    int i=0;
                    while (st.hasMoreElements()) {
                        facture = new Facture(st.nextToken());
                        data = new Object[]{ facture.getIdFacture(), facture.getSociete(),facture.getDate(), facture.getMontantTotal(),facture.getMontantAPayer(),facture.getMoyenEnvoi() };
                        modelFactures.insertRow(i, data);
                        i++;
                    }
                    
                     jTableFactures.setModel(modelFactures);
                }
                else
                {
                    throw new BaseException(this.parent, "Aucune facture a afficher pour cette societe !");
                }
            }
            else
            {
                throw new BaseException(this.parent, "signature non vérifiée");
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(FenListeFactures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(FenListeFactures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(FenListeFactures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchProviderException ex) {
            Logger.getLogger(FenListeFactures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SignatureException ex) {
            Logger.getLogger(FenListeFactures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FenListeFactures.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BaseException ex) {
            Logger.getLogger(FenListeFactures.class.getName()).log(Level.SEVERE, null, ex);
        }  catch (NoSuchPaddingException ex) {
            Logger.getLogger(FenListBill.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(FenListBill.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(FenListBill.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BRecupererActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FenListBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FenListBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FenListBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FenListBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FenListBill dialog;
                try {
                    dialog = new FenListBill(new javax.swing.JFrame(), true, new Socket(), cleClient, keySession);
                     dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(FenListBill.class.getName()).log(Level.SEVERE, null, ex);
                }
               
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BRecuperer;
    private javax.swing.JComboBox CbSociete;
    private javax.swing.JFormattedTextField FDateDebut;
    private javax.swing.JFormattedTextField FDateFin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTableFactures;
    // End of variables declaration//GEN-END:variables
}
