/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Application_Compta;

import Classes.Facture;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.Signature;
import java.security.SignatureException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import utilitaire.BaseException;
import utilitaire.FichierConfig;
/**
 *
 * @author vange
 */
public class FenFactureValidation extends javax.swing.JDialog {
    
    private Facture lastBill;
    public static Socket cliSock;
    public static FichierConfig ConfigProperty = new FichierConfig();
    private String sepProperty;
    private String finChaine;
    private static String codeProvider = "BC"; //CryptixCrypto";
    private static PrivateKey cleClient;
    
    private java.awt.Frame parent;
    
    
    /**
     * Creates new form FenFacture
     */
    public FenFactureValidation(java.awt.Frame parent, boolean modal, Facture facture,Socket sock, PrivateKey keyClient) {
        super(parent, modal);
        initComponents();
        
        
        lastBill = facture;
        
        remplirChamps();
        cliSock = sock;
        sepProperty = ConfigProperty.getConfig().getProperty("separateur");
        finChaine = ConfigProperty.getConfig().getProperty("finChaine");
        cleClient=keyClient;
    }
    
    public String Envoyer(String message)
    {
        String reponse = null;
        try 
        {
            DataOutputStream dos= new DataOutputStream(cliSock.getOutputStream());

            dos.writeUTF(message);
        } 
        catch (IOException ex) 
        {
            Logger.getLogger(Applic_Compta.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return reponse;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        LIdFacture = new javax.swing.JLabel();
        LIdSociete = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        LDate = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        LMontantTotal = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        LMontantRestant = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        LMoyenEnvoi = new javax.swing.JLabel();
        BValider = new javax.swing.JButton();
        BInvalider = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("FACTURE");

        jLabel2.setText("idFacture :");

        LIdFacture.setText("jLabel3");

        LIdSociete.setText("jLabel3");

        jLabel3.setText("Societe :");

        jLabel4.setText("date :");

        LDate.setText("jLabel5");

        jLabel5.setText("Montant total :");

        LMontantTotal.setText("jLabel6");

        jLabel6.setText("Montant restant :");

        LMontantRestant.setText("jLabel7");

        jLabel7.setText("Moyen envoi :");

        LMoyenEnvoi.setText("jLabel8");

        BValider.setText("Valider");
        BValider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BValiderActionPerformed(evt);
            }
        });

        BInvalider.setText("Invalider");
        BInvalider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BInvaliderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LMoyenEnvoi, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LMontantRestant, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LDate, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LMontantTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(LIdFacture)
                                        .addGap(55, 55, 55)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(LIdSociete))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(BValider)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(BInvalider)
                                .addGap(8, 8, 8)))))
                .addContainerGap(77, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(LIdFacture)
                    .addComponent(LIdSociete)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(LDate))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(LMontantTotal))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(LMontantRestant))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LMoyenEnvoi)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BValider)
                    .addComponent(BInvalider))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BValiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BValiderActionPerformed
        try {
            DataInputStream dis= new DataInputStream(cliSock.getInputStream());
            DataOutputStream dos= new DataOutputStream(cliSock.getOutputStream());
            String message = "VALIDATE_BILL" + finChaine;
        
            Envoyer(message);
            
            message = String.valueOf(lastBill.getIdFacture());
            byte[] Message = message.getBytes();
            
            System.out.println("Instanciation de la signature");
            Signature s = Signature. getInstance("SHA1withRSA",codeProvider);
            System.out.println("Initialisation de la signature");
            s.initSign(cleClient);
            System.out.println("Hachage du message");
            s.update(Message);
            System.out.println("Generation des bytes");
            byte[] signature = s.sign();
            System.out.println("Termine : signature construite");
            System.out.println("Signature = " + new String(signature));
            System.out.println("Longueur de la signature = " + signature.length);
            System.out.println("Envoi du message et de la signature");
            dos.writeUTF(message);
            dos.writeInt(signature.length);
            dos.write(signature);
            
            String reponse = dis.readUTF(); 
            if (reponse.equals("Signature testee avec succes"))
            {
                this.dispose();
            }
            else
            {
                throw new BaseException(this.parent, "signature non vérifiée");
            }
            
            
            
        } catch (IOException ex) {
            Logger.getLogger(FenFactureValidation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(FenFactureValidation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchProviderException ex) {
            Logger.getLogger(FenFactureValidation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SignatureException ex) {
            Logger.getLogger(FenFactureValidation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(FenFactureValidation.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BaseException ex) {
            Logger.getLogger(FenFactureValidation.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_BValiderActionPerformed

    private void BInvaliderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BInvaliderActionPerformed
        this.dispose();
    }//GEN-LAST:event_BInvaliderActionPerformed
    
    private void remplirChamps()
    {
        LIdFacture.setText(String.valueOf(lastBill.getIdFacture()));
        LIdSociete.setText(lastBill.getSociete());
        LDate.setText(lastBill.getDate());
        LMontantRestant.setText(lastBill.getMontantAPayer());
        LMontantTotal.setText(lastBill.getMontantTotal());
        LMoyenEnvoi.setText(lastBill.getMoyenEnvoi());
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FenFactureValidation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FenFactureValidation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FenFactureValidation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FenFactureValidation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FenFactureValidation dialog = new FenFactureValidation(new javax.swing.JFrame(), true, new Facture(null),new Socket(),cleClient);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BInvalider;
    private javax.swing.JButton BValider;
    private javax.swing.JLabel LDate;
    private javax.swing.JLabel LIdFacture;
    private javax.swing.JLabel LIdSociete;
    private javax.swing.JLabel LMontantRestant;
    private javax.swing.JLabel LMontantTotal;
    private javax.swing.JLabel LMoyenEnvoi;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    // End of variables declaration//GEN-END:variables
}
